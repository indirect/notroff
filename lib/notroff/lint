#!/usr/bin/env ruby
require 'pp'
require 'rubygems'
require 'set'

this_dir = File.dirname(__FILE__)

require "#{this_dir}/formatter"

class Linter 
  def initialize
    @code_words = SortedSet.new
    @text_words = SortedSet.new
  end

  def process( paragraphs )
    paragraphs.each {|p| process_paragraph(p)}
  end

  def process_paragraph( p )
    if p.type.to_s =~ /code/
      process_code( p.text )
    else
      process_text( p.text )
    end
    #pp @code_words
    #puts "done"
  end

  def process_code( code )
    code = code.gsub( '.', ' ' )
    code = code.gsub( ',', ' ' )
    code = code.gsub( '/', ' ' )
    code = code.gsub( '<', ' ' )
    code = code.gsub( '>', ' ' )
    code = code.gsub( '(', ' ' )
    code = code.gsub( ')', ' ' )
    code = code.gsub( '=', ' ' )
    code = code.gsub( '{', ' ' )
    code = code.gsub( '}', ' ' )
    code = code.gsub( '#', ' ' )
    code = code.gsub( '|', ' ' )
    words = code.split
    words = words.map {|w| w.strip}
    words.each {|w| @code_words << w }
  end

  def process_text( text )
    tokenize_body_text( text ).each do |w|
      @text_words << w
    end
    puts "========= body ========+"
    pp @text_words
  end

  def tokenize_body_text( text )
    text = text.dup
    re = /\@\@.*?\@\@+/
    results = []
    until text.empty?
      match = re.match( text )
      break if match.nil?
      results <<  match.to_s.sub( /^@@/, '' ).sub(/@@$/, '' )
      text = match.post_match
    end
    results
  end


end

class LintFormatter < Formatter

  def initialize( input, output, options={} )
    super
    @processors << Linter.new
  end

end
   

options={}

f = LintFormatter.new( ARGV[0], ARGV[1], options  )
f.process


















